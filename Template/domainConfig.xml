{#
- name: Nombre de la maquina virtual
- mem: Cantidad de memoria medida en MiB
- cantCpu: Cantidad de CPUs
- kdb: Existencia de Kernel Boot
- kernelPath: Ubicación del kernel
- initrdPath: Ubicación del initrd
- disksArray: Lista de diccionarios de discos.
  - disk:
    - type: Tipo de dispositivo.
    - path: Ubicacion de disco.
    - hdType: Tipo de disco.
    - bus: Tipo de bus que usa (ide, sata, virtio)
- ifacesArray: Lista de diccionarios de interfaces.
  -iface:
    - type
    - name
    - mac
    - targetDev
- pciPassEx: Existencia de pciPassthrough
- pciPass:
    - domain
    - bus
    - slot
    - function
#}
<domain type='kvm'>
    <name>{{ name }}</name>
    <memory unit='{{ memUnits }}'>{{ memQ }}</memory>
    <vcpu placement='static'>{{ cantCpu }}</vcpu>
    {# Boot order #}
    <os>
        <type arch='x86_64' machine='pc'>hvm</type>{% if kdb %}
        <kernel>{{ kernelPath }}</kernel>
        <initrd>{{ initrdPath }}</initrd>
        <cmdline>root=/dev/vda2 root-delay=15 console=ttyS0</cmdline>{% endif %}
        <boot dev='hd'/>
        <boot dev='cdrom'/>
        <bootmenu enable='no' timeout='0'/>
    </os>
    <clock offset='utc'/>
    <on_poweroff>destroy</on_poweroff>
    <on_reboot>restart</on_reboot>
    <on_crash>destroy</on_crash>
    <devices>
        <emulator>/usr/bin/qemu-system-x86_64</emulator>{% for disk in disksArray %}
        <disk type='file' device='{{ disk.device }}'>
            <driver name='qemu' type='{{ disk.driverType }}'/>
            <source file='{{ disk.path }}'/>
            <target dev='{{ disk.hdType }}' bus='{{ disk.bus }}'/> {# Define tipos de discos #}
            {# <address type='drive' controller='0' bus='0' target='0' unit='{{ loop.index }}'/> #}
        </disk>{% endfor %}{% for iface in ifacesArray %}
        <interface type='{{ iface.type }}'>
            <source network='default'/>
            <mac address='{{ iface.mac }}'/>
            <source dev="{{ iface.targetDev }}" mode="bridge" />
            <model type='{{ iface.modelType }}'/>
            {# <address type='pci' domain='0x0000' bus='0x00' slot='0x0{{ loop.index + 2 }}' function='0x0'/> #}
        </interface>{% endfor %}{% if pciPassEx %}
        <hostdev mode='subsystem' type='pci' managed='yes'>
            <source>
                <address domain='{{ pciPass.domain }}' bus='{{ pciPass.bus }}' slot='{{ pciPass.slot }}' function='{{ pciPass.function }}'/>
            </source>
        </hostdev>{% endif %}
        <graphics type='vnc' port='-1' listen='127.0.0.1'/>
        <serial type='pty'>
            <target type='isa-serial' port='0'>
                <model name='isa-serial'/>
            </target>
        </serial>
        <console type='pty'>
            <target type='serial' port='0'/>
        </console>
    </devices>
</domain>
